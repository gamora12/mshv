name: Build & Test MSHV Crate
on: 
  pull_request:
  workflow_dispatch:
jobs:
  infra-x86_64:
    name: MSHV Infra Setup (x86_64)
    uses: ./.github/workflows/mshv-infra.yaml
    with:
      ARCH: x86_64
      RG: MSHV-${{ github.run_id }}-x86_64
      SKU: Standard_D16s_v5
    secrets:
      MI_CLIENT_ID: ${{ secrets.MSHV_MI_CLIENT_ID }}
      RUNNER_RG: ${{ secrets.MSHV_RUNNER_RG }}
      RUNNER: ${{ secrets.MSHV_RUNNER }}
      STORAGE_ACCOUNT_PATHS: ${{ secrets.MSHV_STORAGE_ACCOUNT_PATHS }}
      AARCH64_SOURCE_PATH: ${{ secrets.MSHV_AARCH64_SOURCE_PATH }}
      X86_SOURCE_PATH: ${{ secrets.MSHV_X86_SOURCE_PATH }}
      USERNAME: ${{ secrets.MSHV_USERNAME }}

  build-test-x86_64:
    name: Build & test (x86_64)
    needs: infra-x86_64
    if: ${{ always() && needs.infra-x86_64.result == 'success' }}
    runs-on:
      - self-hosted
      - Linux
    steps:
      - name: Build & Run tests on remote x86_64 VM
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PRIVATE_IP: ${{ needs.infra-setup.outputs.PRIVATE_IP }}
          RG: MSHV-${{ github.run_id }}-x86_64
          USERNAME: ${{ secrets.MSHV_USERNAME }}
          VM_NAME: x86_64_${{ github.run_id }}
        run: |
          set -e
          echo "Connecting to the VM via SSH..."
          ssh -i ~/.ssh/azure_key -o StrictHostKeyChecking=no ${USERNAME}@${PRIVATE_IP} << EOF
            set -e
            echo "Logged in successfully."

            export PATH="\$HOME/.cargo/bin:\$PATH"
            cd mshv

            # Fetch the merged state of the PR using the PR number
            # echo "Fetching the merged state of PR #${PR_NUMBER}..."
            # git fetch origin pull/${PR_NUMBER}/merge
            # git checkout FETCH_HEAD

            cargo build --all-features --workspace --target x86_64-unknown-linux-gnu
            cargo test --all-features --workspace --target x86_64-unknown-linux-gnu
          EOF
          echo "Build and test completed successfully."

  cleanup-x86_64:
    name: Cleanup RG x86_64
    needs: build-test-x86_64
    if: always()
    runs-on:
      - self-hosted
      - Linux
    steps:
      - name: Delete RG
        run: |
          if az group exists --name MSHV-${{ github.run_id }}-x86_64; then
            az group delete --name MSHV-${{ github.run_id }}-x86_64 --yes --no-wait
          else
            echo "Resource Group MSHV-${{ github.run_id }}-x86_64 does not exist. Skipping deletion."
          fi
          echo "Cleanup process completed."

  infra-aarch64:
    name: MSHV Infra Setup (aarch64)
    uses: ./.github/workflows/mshv-infra.yaml
    with:
      ARCH: aarch64
      RG: MSHV-${{ github.run_id }}-aarch64
      SKU: Standard_D16ps_v5
    secrets:
      MI_CLIENT_ID: ${{ secrets.MSHV_MI_CLIENT_ID }}
      RUNNER_RG: ${{ secrets.MSHV_RUNNER_RG }}
      RUNNER: ${{ secrets.MSHV_RUNNER }}
      STORAGE_ACCOUNT_PATHS: ${{ secrets.MSHV_STORAGE_ACCOUNT_PATHS }}
      AARCH64_SOURCE_PATH: ${{ secrets.MSHV_AARCH64_SOURCE_PATH }}
      X86_SOURCE_PATH: ${{ secrets.MSHV_X86_SOURCE_PATH }}
      USERNAME: ${{ secrets.MSHV_USERNAME }}

  build-test-aarch64:
    name: Build & test (aarch64)
    needs: infra-aarch64
    if: ${{ always() && needs.infra-setup-aarch64.result == 'success' }}
    runs-on:
      - self-hosted
      - Linux
    steps:
      - name: Build & Run tests on remote aarch64 VM
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PRIVATE_IP: ${{ needs.infra-setup.outputs.PRIVATE_IP }}
          RG: MSHV-${{ github.run_id }}-aarch64
          USERNAME: ${{ secrets.MSHV_USERNAME }}
          VM_NAME: aarch64_${{ github.run_id }}
        run: |
          set -e
          echo "Connecting to the VM via SSH..."
          ssh -i ~/.ssh/azure_key -o StrictHostKeyChecking=no ${USERNAME}@${PRIVATE_IP} << EOF
            set -e
            echo "Logged in successfully."

            export PATH="\$HOME/.cargo/bin:\$PATH"
            cd mshv

            # Fetch the merged state of the PR using the PR number
            # echo "Fetching the merged state of PR #${PR_NUMBER}..."
            # git fetch origin pull/${PR_NUMBER}/merge
            # git checkout FETCH_HEAD

            cargo build --all-features --workspace --target aarch64-unknown-linux-gnu
            cargo test --all-features --workspace --target aarch64-unknown-linux-gnu
          EOF
          echo "Build and test completed successfully."

  cleanup-aarch64:
    name: Cleanup RG aarch64
    needs: build-test-aarch64
    if: always()
    runs-on:
      - self-hosted
      - Linux
    steps:
      - name: Delete RG
        run: |
          if az group exists --name MSHV-${{ github.run_id }}-aarch64; then
            az group delete --name MSHV-${{ github.run_id }}-aarch64 --yes --no-wait
          else
            echo "Resource Group MSHV-${{ github.run_id }}-aarch64 does not exist. Skipping deletion."
          fi
          echo "Cleanup process completed."
